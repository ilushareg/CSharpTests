Wouter de Kort Exam Ref 70-483_ Programming in C# (2013)


====Objective 1.1: Implement multithreading and asynchronous processing
System.Threading namespace
new Thread(new ThreadStart/ParameterizedThreadStart(ThreadMethod));
t.Start();t.Join();
Thread.Sleep(0) It is used to signal to Windows that this thread is finished.
Foreground threads can be used to keep an application alive.
a thread working with file handles or opening database connections should ideally be foreground
ParameterizedThreadStart can be used if you want to pass some data through Thread.Start(Object o)
Thread.Abort ThreadAbort - Exception is thrown. A better way to stop a thread is by using a shared variable
[ThreadStatic] vs [ThreadLocal]: Local - можно контролировать скоуп
CultureInfo associated with the current thread through Thread.Current- Thread
Thread.Abort не поддерживается в dotnet 3.0.101 )8
ExecutionContext.SuppressFlow не разобрался, мутно, но в целом о том, наследует ли ExecutionContext потока рождаемый в нем поток, кажется.
==THREAD POOL
ThreadPool.QueueUserWorkItem(Func) Ограниченное количество потоков, но они реюзаются, если свободных нет - складывают в очередь
ThreadPool automatically manages the amount of threads it needs. Увеличивает и уменьшает следую какой-то логике
!!!The thread pool uses background threads, which do not keep the application running if all foreground threads have terminated.
Возвращение данных от потока, выполняемого в ThreadPool надо делать вручную
==TASKS
Task can tell you if the work is completed return a result
task scheduler is responsible for starting the Task and managing it
By default, the Task scheduler uses threads from the thread pool to execute the Task.
Task.Run Task.Wait
t.Result - работает как Wait
.ContinueWith((i) - для continuation-а, можно передавать результат, типа <TResult>
You can add different continuation methods that will run when an exception happens, the Task is canceled, or the Task completes successfully
TaskContinuationOptions.OnlyOnFaulted TaskContinuationOptions.OnlyOnRanToCompletion TaskContinuationOptions.OnlyOnCanceled
Task can also have several child Tasks. The parent Task fin- ishes when all the child tasks are ready.
Task.WaitAll, Task.WaitAny - ожидает завершения задач(и) синхронно. Task.WaitAll - создает continuation task, который ждет завершения всех.
Interlocked - библиотека для атомарных операций синхронизации (exchange и.т.д.)
==PARALLEL
Parallel class has a couple of static methods—For, ForEach, and Invoke для добавления паралелизации содержимому Task-а (Parallelism)
ParallelLoopState для Break or Stop. Break ensures that all iterations that are currently running will be finished. Stop just terminates everything.
ParallelLoopResult позволяет контролировать, как все прошло.
==ASYNC/AWAIT
Появились в C# 5
work that’s input/output (I/O)–bound сложно параллелить, просто только с CPUBound
AggregateException - возникает, если что-то идет не так в асинхронном методе, но async/await разворачивает все за нас и отдает внятный exception
SynchronizationContext в основном применяется, чтобы работа с объектами, которые Non-Thread-Safe (например UI) происходила в конкретном потоке. in both Windows Forms and WPF, a control can only be accessed on the thread on which it was created
A void returning async method is effectively a fire-and-forget method. Не будет эксепшенов выкинуто наружу
==PLINQ (Parallel Language Integrated Query)
Enumerable.AsParallel WithExecutionMode WithDegreeOfParallelism (number of processors up to 64). AsSequential
Order is not guaranteed! Надо AsOrdered, чтобы сохранить порядок. the results are buffered and sorted
==CONCURRENT COLLECTIONS
- BlockingCollection<T>
- ConcurrentBag<T> It enables duplicates and it has no particular order. Important methods are Add, TryTake, and TryPeek.
implements IEnumerable<T> made thread-safe by making a snapshot of the collection
- ConcurrentQueue<T> - ConcurrentStack<T> When you enumerate the collection, a snapshot is taken.
- ConcurrentDictionary<TKey,T>

Q: На платформах где Thread.Abort поддерживается выкидывается ли ThreadAbort exception, когда ее прибивают.
Q: можно ли переопределить логику, которая управляет скалированием ThreadPool-а
Q: TaskContinuationOptions.OnlyOnRanToCompletion - можно ли вместо него флаг передать и почему VS mac ругается на i.Result???
Q: TaskTests Task.WaitAll(childTasks); на мак не дождался child потоков, Надо ли делать в MSVS???
Q: SynchronizationContext посмотреть в других книгах и дочитать https://docs.microsoft.com/en-us/archive/msdn-magazine/2011/february/msdn-magazine-parallel-computing-it-s-all-about-the-synchronizationcontext
Q: Прочитать про pitfals PLINQ и остальных https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/potential-pitfalls-in-data-and-task-parallelism


====Objective 1.2: Manage multithreading (доступ к ресурсам, локи)
Interlocked class позволяет использовать атомарные операции, как Interlocked.Exchange Increment Decrement CompareExchange
Use the lock statement on a private object to synchronize access to a piece of code
Cancel tasks by using the CancellationTokenSource class with a CancellationToken

1D
2B
3B
Q: ManageMultithreadingExceptionHandling cancellationToken vs continuation разобраться, сложно!!!???

====Objective 1.3: Implement program flow
doesn’t have to evaluate the right part of your expression. This is called short-circuiting.
Q: сработает ли с читами или compile time?

The ?? operator is called the null-coalescing operator.

Q: int? x
You need to have a state- ment such as break or return that explicitly exits the switch statement
for: The condition is evaluated on each iteration
1С
2D
3С

====Objective 1.4: Create and implement events and callbacks
==DELEGATES
A delegate is a type that defines a method signature
delegate can be a nested type
invocation list can be modified with + += - -= and invoked by ()
delegates inherit from the System.MulticastDelegate class that in turn inherits from System.Delegate.
delegates support covariance and contravariance
Q: blog post on covariance and contravariance http://blogs.msdn.com/b/ericlippert/archive/tags/covariance+and+contravariance/

==LAMBDA EXPRESSIONS
In C#, 2.0 anonymous methods were added. In C# 3.0, things became even better when lambda expressions were added.
lambda functions are called anonymous functions
return and parameter types aren't specified.
.NET Framework has a couple of built-in delegate types
в system неймспейсе есть встроенные типы Func<...>, унаследованные от System.MulticastDelegate
делегат без return типа - это System.Action
closure - когда делегат использует какие-то переменные на стеке или this (он вроде тоже не стеке?) и переживает скоуп в котором был определен
design pattern publish-subscribe позволяет компонентам приложения избежать tight coupling и подписываться на события
If there would be no subscribers to an event, the OnChange property would be null.

=EVENTS
with the event syntax, the compiler protects your field from unwanted access.
Подписывать можно много раз один и тот же EventHandler, каждый -= убирает один экземпляр подписки
Custom event accessor позволяет переопределить add/remove
It’s important to put a lock around adding and removing subscribers to make sure that the operation is thread safe.
you shouldn't depend on order of execution
exception останавливает рассылку ивентов. Если нужно - надо рассылать вручную, получив invocationlist из базового System.Delegate

1a
2b,c
3a

====Objective 1.5: Implement exception handling
Нельзя поймать StackOverflowException выброшеный системой =)
Environment.FailFast роняет приложение совсем не позволяя finally выполниться
System.Runtime.ExceptionServices.ExceptionDispatchInfo = ExceptionDispatchInfo.Capture чтобы сохранить информацию о прерывании can be used when you want to catch an exception in one thread and throw it on another thread.
add the Serializable attribute, to make sure that your exception can be serialized and works correctly across application domains
You should never inherit from System.ApplicationException the class became useless and lost its meaning

1d
2b
3abc

Q: чем прерывания лучше ошибок?
Тем что они объекты (но и ошибки могут так)
Можно рапортовать (обработать?) какие-то непредусмотренные ситуации, ловя Exception
Q: inner exception vs ExceptionDispatchInfo

========Create and use types Chapter2
Enumerations can also be used with a special Flags attribute
The benefit of storing data on the stack is that it’s faster, smaller, and doesn’t need the attention of the garbage collector
You cannot directly inherit from System.ValueType. Instead, you can use the struct keyword to create a new value type.
indexer: public Card this[int index]
whole class can be declared static
Default ctor isn't created if there is an overload with params
Constructor chaining: public ConstructorChaining() : this(3) { }
A Nullable is a wrapper around a value type with a Boolean flag that it stores if the Nullable has a value set.
T defaultValue = default(T);
extension methods enable you to add new capabilities to an existing type public static decimal Discount(this Product product)
extension method also can be declared on an interface (such as IEnumerable<T>)
extension class can't be nested
==Overriding Methods
You can disable inheritance by using the sealed keyword on a class or a method.

1b
2a
3c

Q:read “unsafe (C# Reference)” at http://msdn.microsoft.com/en-us/ library/chfa2zb8.aspx.
Q: Normally, a value type would need to be boxed to be used in a nongeneric collection. By using generics, you can avoid the performance penalty for boxing and unboxing.

====Objective 2.2: Consume types
dynamic keyword override the compile-time checking and work with C# as a weakly typed language.
If you execute an invalid unbox operation, the runtime will throw an InvalidCastException.
When using the nongeneric collections to store a value type, you have a lot of boxing-unboxing
boxing puts pressure on the garbage collector to remove all the packaged value types from the heap
==Converting between different types
public static implicit/explicit operator decimal(Money money)
is/as operators (as returns null if conversion is not possible like dynamic_cast)
dynamic keyword запоминает код для runtime интерпретации и не проверяет типы
By using DynamicObject, you can create truly dynamic objects and have full control over how they operate at runtime.


Q: cast operator as extension method? - нет
Q: Exporting some data to Excel (try) - no
Q: helper class that aids in converting item . HOW?
Q: где generic collections хранят данные heap или stack?

1b
2ac
3a
====Objective 2.3: Enforce encapsulation
[assembly:InternalsVisibleTo(“Friend1a”)] include this attribute inside the AssemblyInfo.cs
enum interface allways public, struct can't be protected (no inheritance possilbe)
access modifier of the enclosing type is always taken into account
exceptions to this (for example, when an internal class implements a public interface or when a class overrides a public virtual member of a base class)
==Using explicit interface implementations
Explicit interface implementation means that an interface type element can be accessed only when using the interface directly.
void IInterfaceA.MyMethod() { }

====Objective 2.4: Create and implement a class hierarchy
interface might define a property with only a get accessor
You can also use generics when defining interfaces.
Multiple inheritance is not supported in C#
==Creating and using base classes
terms base and derived class to avoid any confusion with inheritance in the real world.
==Changing behavior
the new keyword, which explicitly hides the member from a base class
==Abstract and sealed base classes
abstract classes
An abstract class enables you to share both implemented methods and method signatures that a derived class needs to implement.

sealed classes (struct is sealed by default)
Marking a class as sealed is a good practice.



Q: в каком порядке вызываются конструкторы base?
Q: может быть virtual property?
Q: попробовать generic exrension
Q: repository pattern interface vs generic vs extension. What's used int LIST?

====Implementing standard .NET Framework interfaces
IComparable is used to sort elements
IEnumerable helps you to implement the iterator pattern. exposes GetEnumerator
enumerator has a MoveNext method that returns the next item in the collection.
Yield is a special keyword that can be used only in the context of iterators. It instructs the compiler to convert this regular code to a state machine.
IDisposable is used to facilitate working with external, unmanaged resources.
Использование оператора using обеспечивает вызов метода Dispose, даже если в блоке using возникает исключение.

161
1b
2b
3bd

Q: как построить стейтмашину с Yield?


Q: IComparable Что делать, если хочется сортировать по разным свойствам? Func<int>?


Q: что за запись? using (List<int>.Enumerator enumerator = numbers.GetEnumerator()) откуда using?


====Objective 2.5: Find, execute, and create types at runtime by using reflection
generating code at runtime by using both CodeDom and expression trees
==ATTRIBUTES
Attributes can be added to all kinds of types: assemblies, types, methods, parameters, and properties.
ConditionalAttribute to indicate to the compiler that a method call should be ignored unless a specific compiler option is specified.
Attribute can be an attribute applied to a whole assembly, a class, a specific method, or even a parameter of a method. [assembly: AssemblyTitle(“ClassLibrary1”)]
attributes can be read at runtime through reflection
The System.Attribute class, from which all other attributes inherit, defines some static methods to see whether attribute is applied
you can also create your own attributes
attributes require all properties to be read-write.
==REFLECTION

162
1d
2b
3c

====Objective 2.6: Manage the object life cycle
==GC
Because of this, all threads are frozen while doing a collect operation.
This can have a huge performance impact
The garbage collector starts clean- ing up only when there is not enough room on the heap to construct a new object (or when Windows signals that it’s low on memory).
it tries to do this on a moment that the usage of the application is low.
==Managing unmanaged resources
Because of this, C# supports the concept of finalization.
the finalizer is called only when a garbage collection occurs.
You can force this by adding a call to GC.Collect
WaitForPendingFinalizers makes sure that all finalizers have run before the code continues.
it’s not recommended that you call GC.Collect yourself.
C# offers the idea of the IDisposable interface
you need to wrap all types that implement IDisposable in a try/finally statement.
call Dispose in the finally clause.
Using a disposed item will result in an ObjectDisposedException.
C# has a special statement for this: the using statement.
==Implementing IDisposable and a finalizer
System.GC.SuppressFinalize(this); to remove object from finalization list GC keeps track of
A class that implements IDisposable should have some unmanaged resources.
root reference - A root can be a static field, a method parameter, a local variable, or a CPU register.

Q: синхронно ли выполняется GarbageCollection. есть ли шанс, что weak ref сколлектится в процессе работы?
Q: почему weakref не отпускается в процессе, где-то на объект появляется ref?

p181
1c
2d
3c
p198

====Objective 2.7: Manipulate strings
string is immutable, so it cannot be changed after it has been created. Every change to a string will create a new string.
When creating two identical string literals in one compilation unit, the compiler ensures that only one string object is created by the CLR. (Compile time string interning)
.NET Framework offers some special helper classes when dealing with strings. StringBuilder it is
==StringBuilder
==StringWriter and StringReader
These classes adapt the interface of the StringBuilder so they can be used in places where a TextWriter or TextReader is expected.
==Searching for strings
String class offers a couple of methods that can help you perform all kinds of search actions. The most common are IndexOf, LastIndexOf, StartsWith, EndsWith, and SubString.
string methods can be culture sensitive.
always try to avoid the methods that don’t use an explicit value of StringComparison.

p190
1a
2b
3b


====READING
blog post on covariance and contravariance http://blogs.msdn.com/b/ericlippert/archive/tags/covariance+and+contravariance/
read “unsafe (C# Reference)” at https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/unsafe
information about designing systems with high cohesion and low coupling can be found at http://msdn.microsoft.com/en-us/magazine/cc947917.aspx
SOLID
string best practices https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings
